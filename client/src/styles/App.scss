@use 'variables.scss' as *;
@use 'maps.scss' as *;

@forward 'variables.scss';
@forward 'maps.scss';

body {
  height: 100vh;
  color: hsl(0deg 0% 90%);
  background-color: hsl(0deg 0% 10%);
}

h1 {
  color: $color;
}

/*
 * ### Ripple ###
*/

.ripple {
  background-position: center;
  transition: background 0.65s;
}
.ripple:hover {
  background: radial-gradient(
    circle,
    hsla(207, 90%, 54%, 0.8) 1%,
    hsla(207, 90%, 54%, 0.4) 1%
    ) center/15000%;
}
.ripple:active {
  background-size: 100%;
  transition: background 0s;
}

/*
 * ### Flex Box ###
*/

// COMMT: To be used with @mixin use-flex
@function get-flex($str) {
  $str-part-1: '';
  $str-part-2: '';
  $str-part-3: '';

  $idx: str-index($str, '_');

  @while $idx != null {

    $str-part-1: str-slice($str, 1, $idx - 1);
    $new-str: str-slice($str, $idx+1, str-length($str));
    $new-idx: str-index($new-str, '_');

    $str-part-2: str-slice($new-str, 1, $new-idx - 1);
    $str-part-3: str-slice($new-str, $new-idx + 1, str-length($new-str));

    @return $str-part-1, $str-part-2, $str-part-3;
  }
  @return ($str-part-1, $str-part-2, $str-part-3);
}

// COMMT: To be used directly on .scss with @include or via @each loop
@mixin use-flex($str) {
  $curr-flex-list: get-flex($str);
  display: #{nth($curr-flex-list, 1)};
  justify-content: #{nth($curr-flex-list, 2)};
  $item: nth($curr-flex-list, 3);
  @debug "$item: #{$item}";
  @if $item == center {
    align-items: #{$item};
  } @else {
    align-items: flex-#{$item};
  }
}

// COMMT:
// loop through flex-key-map
// use @mixin get-flex() on each key, with key as str param
// output them as css class
// use them in style class with tailwind @apply OR directly on .tsx classNames

@each $str in $flex-key-map {

  .#{$str} {
    @include use-flex($str);
  }

}
